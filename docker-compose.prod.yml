version: "3.8"

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - college_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - college_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 10s
    restart: unless-stopped
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - college_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    stop_grace_period: 15s
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 backend.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672//
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: celery -A backend worker --loglevel=INFO --concurrency=4
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/college_schedule
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: celery -A backend beat --loglevel=INFO
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/college_schedule
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672//
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    env_file:
      - .env
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
    deploy:
      resources:
        limits:
          memory: 512M

  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - college_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_var:/var/lib/letsencrypt
      - static_volume:/var/www/static
    command: certonly --webroot --webroot-path=/var/www/static --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email --force-renewal -d college-schedule.ru -d www.college-schedule.ru
    networks:
      - college_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  static_volume:
  media_volume:
  certbot_etc:
  certbot_var:

networks:
  college_network:
    driver: bridge
