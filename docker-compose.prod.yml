version: "3.8"

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - college_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U juliahdg"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass Juliahdg_root!27
    networks:
      - college_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Juliahdg_root!27", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    stop_grace_period: 10s
    restart: unless-stopped
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 512M

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: $RABBITMQ_USER
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_PASSWORD
    networks:
      - college_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    stop_grace_period: 15s
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 backend.backend.backend.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      # Django settings
      DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY
      DJANGO_DEBUG: $DJANGO_DEBUG
      DJANGO_ALLOWED_HOSTS: $DJANGO_ALLOWED_HOSTS
      CSRF_TRUSTED_ORIGINS: $CSRF_TRUSTED_ORIGINS

      # Database
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

      # Celery/RabbitMQ
      CELERY_BROKER_URL: $CELERY_BROKER_URL

      # Redis
      REDIS_URL: $REDIS_URL
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: celery -A backend worker --loglevel=INFO --concurrency=4
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      # Django settings
      DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY
      DJANGO_DEBUG: $DJANGO_DEBUG

      # Database
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

      # Celery/RabbitMQ
      CELERY_BROKER_URL: $CELERY_BROKER_URL

      # Redis
      REDIS_URL: $REDIS_URL
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    working_dir: /app
    command: celery -A backend beat --loglevel=INFO
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      # Django settings
      DJANGO_SECRET_KEY: $DJANGO_SECRET_KEY
      DJANGO_DEBUG: $DJANGO_DEBUG

      # Database
      POSTGRES_HOST: $POSTGRES_HOST
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

      # Celery/RabbitMQ
      CELERY_BROKER_URL: $CELERY_BROKER_URL

      # Redis
      REDIS_URL: $REDIS_URL
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - college_network
    stop_grace_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      VITE_API_URL: $VITE_API_URL
    networks:
      - college_network
    network_mode: host
    stop_grace_period: 10s
    restart: unless-stopped
    volumes:
      - static_volume:/app/static
    deploy:
      resources:
        limits:
          memory: 2G

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  static_volume:
  media_volume:

networks:
  college_network:
    driver: bridge
